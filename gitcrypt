#!/bin/bash

readonly VERSION="0.3.0"
readonly DEFAULT_CIPHER="aes-256-ecb"

OPTION_YES=0       # With -y, accept the defaults in all prompts.

init_config() {

	local answer
	while [ 1 ]; do
		while [ -z "$SALT" ]; do
			answer=$(prompt "Generate a random salt? [Y/n]" Y)

			case "$answer" in
				n*|N*)
					SALT=$(prompt "Shared salt as hex characters:" "")

					if [ $(echo "$SALT" | grep '[^a-f0-9]' | wc -l) -ne 0 ]; then
						echo "Error: non-hex characters in salt"
						unset -v SALT
					fi
					;;
				*)
					local md5=$(which md5 2>/dev/null || which md5sum 2>/dev/null)
					SALT=$(head -c 10 < /dev/random | $md5 | cut -c-16)
					;;
			esac
		done

		while [ -z "$PASS" ]; do
			answer=$(prompt "Generate a random password? [Y/n]" Y)

			case "$answer" in
				n*|N*)
					PASS=$(prompt "Enter your passphrase:" "")
					;;
				*)
					PASS=$(cat /dev/urandom | tr -dc '!@#$%^&*()_A-Z-a-z-0-9' | head -c32)
					;;
			esac
		done

		while [ -z "$CIPHER" ]; do
			CIPHER=$(prompt "What encryption cipher do you want to use? [$DEFAULT_CIPHER]" "$DEFAULT_CIPHER")
			[ -z "$CIPHER" ] && CIPHER="$DEFAULT_CIPHER"

			local exists
			exists=$(openssl list-cipher-commands | grep "$CIPHER")
			[ $? -eq 0 ] || CIPHER=""

			test -z "$CIPHER" && echo "Error: Cipher '$CIPHER' is not available"
		done

		echo -e "\nThis configuration will be stored:\n"
		echo "salt:   $SALT"
		echo "pass:   $PASS"
		echo "cipher: $CIPHER"
		echo
		answer=$(prompt "Does this look right? [Y/n]" Y)

		case "$answer" in
			n*|N*)
				# Reconfigure
				unset -v SALT
				unset -v PASS
				unset -v CIPHER
				;;
			*)
				# Finished
				break
				;;
		esac
	done

	while [ -z "$ATTRS" ]; do
		answer=$(prompt "Do you want to use .git/info/attributes? [Y/n]" Y)

		case "$answer" in
			n*|N*)
				ATTRS=".gitattributes"
				;;
			*)
				ATTRS=".git/info/attributes"
				;;
		esac
	done

	while [ -z "$PATTERN" ]; do
		PATTERN=$(prompt "What files do you want encrypted? [*]" "*")
		[ -z "$PATTERN" ] && pattern="*"
	done

	echo "$PATTERN filter=encrypt diff=encrypt" >> "$ATTRS"
	echo "[merge]" >> "$ATTRS"
	echo "    renormalize=true" >> "$ATTRS"

	# Encryption
	git config gitcrypt.salt "$SALT"
	git config gitcrypt.pass "$PASS"
	git config gitcrypt.cipher "$CIPHER"

	# List all unmodified matching files.
	git ls-files -v -m -c "$PATTERN" |
	sort -k2,2 -t' ' | uniq -s1 |
	grep ^H | cut -f2,2 -d' ' |
	(
		# Apply filters
		git config filter.encrypt.smudge "gitcrypt smudge"
		git config filter.encrypt.clean "gitcrypt clean"
		git config diff.encrypt.textconv "gitcrypt diff"

		# Automatically unsmudge all unmodified matching files.
		xargs git checkout
	)
}

prompt() {
	string="$1" ; shift
	default="$1" ; shift

	if [ "$OPTION_YES" -gt 0 -a -n "$default" ]; then
		echo "$default"
	else
		echo -n "$string " > /dev/tty
		read answer < /dev/tty
		echo "$answer"
	fi
}

_clean() {
	# Encrypt using OpenSSL
	openssl enc -base64 -$CIPHER -S "$SALT" -k "$PASS"
}

_smudge() {
	# If decryption fails, use `cat` instead
	openssl enc -d -base64 -$CIPHER -k "$PASS" 2> /dev/null || cat
}

_diff() {
	# If decryption fails, use `cat` instead
	openssl enc -d -base64 -$CIPHER -k "$PASS" -in "$1" 2> /dev/null || cat "$1"
}

# Options processing.
while [ $# -gt 0 ]; do
	case "$1" in
		-y) OPTION_YES=1 ; shift ;;
		 *) break ;;
	esac
done

command="$1" ; shift

case "$command" in
	clean|smudge|diff)
		# Need a shared salt
		SALT=$(git config gitcrypt.salt)
		if [ -z "$SALT" ]; then
			echo "Gitcrypt: shared salt (gitcrypt.salt) has not been configured"
			exit 1
		fi

		# Need a secure passphrase
		PASS=$(git config gitcrypt.pass)
		if [ -z "$PASS" ]; then
			echo "Gitcrypt: secure passphrase (gitcrypt.pass) has not been configured"
			exit 1
		fi

		# And a cipher mode
		CIPHER=$(git config gitcrypt.cipher)
		[ -z "$CIPHER" ] && CIPHER="$DEFAULT_CIPHER"

		# Execute command
		_$command "$@"
		;;
	init)
		# Run setup commands
		init_config "$@"
		;;
	version)
		# Show version
		echo "gitcrypt version $VERSION"
		;;
	*)
		# Not a valid option
    if [ -z "$command" ]; then
      echo "Gitcrypt: available options: init, version"
    else
		  echo "Gitcrypt: command does not exist: $command"
    fi
		exit 1
		;;
esac
exit 0
